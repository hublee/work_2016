package com.zeustel.top9.utils;

import android.content.Context;
import android.view.View;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.animation.AnticipateOvershootInterpolator;

import com.zeustel.top9.R;

/**
 * ...
 *
 * @author NiuLei
 * @email niulei@zeustel.com
 * @date 2015/10/18 15:46
 */
public class AnimUtils {
    public static final int DEF_OFFSET = 100;
    private AnticipateOvershootInterpolator mAnticipateOvershootInterpolator;

    public enum TranslateDirection {
        LEFT(R.anim.anim_left_in), TOP(R.anim.anim_top_in), RIGHT(R.anim.anim_right_in), BOTTOM(R.anim.anim_bottom_in);
        private int animId;

        TranslateDirection(int animId) {
            this.animId = animId;
        }

        public int getAnimId() {
            return animId;
        }
    }

    private Context context = null;
    private static AnimUtils mAnimIn = null;

    private AnimUtils(Context context) {
        this.context = context;
        mAnticipateOvershootInterpolator = new AnticipateOvershootInterpolator();
    }

    /**
     * 懒汉式 单例模式
     * 特点 实例的延迟加载
     * 由于 多线程并发访问会出现安全问题 要加同步锁
     * 同步代码块和 同步关键字都行 <低效>
     * 用双层判断 可以解决 低效 问题
     */
    public static AnimUtils getInstance(Context context) {
        if (mAnimIn == null) {
            synchronized (AnimUtils.class) {
                if (mAnimIn == null)
                    mAnimIn = new AnimUtils(context);
            }
        }
        return mAnimIn;
    }

    public void translateIn(View v, TranslateDirection direction, boolean overshoot, int offset) {
        if (v != null) {
            Animation animation = getTranslate(direction, overshoot);
            animation.setStartOffset(offset);
            v.startAnimation(animation);
        }
    }

    public void translateIn(View v, TranslateDirection direction, boolean overshoot) {
        if (v != null) {
            Animation animation = getTranslate(direction, overshoot);
            v.startAnimation(animation);
        }
    }
    public Animation getRotate(int startOffset){
        Animation animation = AnimationUtils.loadAnimation(context, R.anim.anim_rotate);
        animation.setStartOffset(startOffset);
        return animation;
    }
    public void rotate(View v,int startOffset) {
        if (v != null) {
            Animation animation = AnimationUtils.loadAnimation(context, R.anim.anim_rotate);
            animation.setStartOffset(startOffset);
            animation.setAnimationListener(listener);
            v.startAnimation(animation);
        }
    }

    public Animation getTranslate(TranslateDirection direction, boolean overshoot) {
        Animation animation = AnimationUtils.loadAnimation(context, direction.getAnimId());
        animation.setAnimationListener(listener);
        if (overshoot && mAnticipateOvershootInterpolator != null) {
            animation.setInterpolator(mAnticipateOvershootInterpolator);
        }
        return animation;
    }

    public void scaleIn(View v, int startOffset) {
        if (v != null) {
            Animation animation = AnimationUtils.loadAnimation(context, R.anim.anim_sacle_in);
            animation.setAnimationListener(listener);
            animation.setStartOffset(startOffset);
            v.startAnimation(animation);
        }
    }

    public Animation getScaleIn() {
        Animation animation = AnimationUtils.loadAnimation(context, R.anim.anim_sacle_in);
        return animation;
    }


    private Animation.AnimationListener listener = new Animation.AnimationListener() {
        @Override
        public void onAnimationStart(Animation animation) {

        }

        @Override
        public void onAnimationEnd(Animation animation) {
            if (animation != null) {
                animation.cancel();
                animation = null;
            }
        }

        @Override
        public void onAnimationRepeat(Animation animation) {

        }
    };
}
