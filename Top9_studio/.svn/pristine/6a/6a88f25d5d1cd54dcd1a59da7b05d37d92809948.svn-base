package com.zeustel.top9.base;

import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;

import com.zeustel.top9.ContainerActivity;
import com.zeustel.top9.R;

/**
 * 被viewpager + viewpager 内部包含的Fragment的基类
 * 用于统计页面数据
 * 注:
 * ViewPager内Fragment 生命周期
 * 默认情况下
 * 1、ViewPager 会预加载下一个页面 销毁 当前index - 2 或者 index + 2 页面
 * eg viewpager内有 fragment a , b , c
 * 第一次启动 a,b都会调用 onCreate onResume b被预加载
 * 页面切换到b  b的生命周期不会改变 c会调用onCreate onResume
 * 页面切换到c c生命周期不会变化 a会调用 onStop onDestroy
 * 点击home键返回页面 当前页面+上一个 或者下一个页面 同时onStop
 * 重新进入应用 当前页面+上一个 或者下一个页面 同时onResume
 * 2、ViewPager setOffscreenPageLimit(size)设置预加载数量
 * eg 加载全部页面时
 * 第一次启动 所有页面都会调用 onCreate onResume
 * 页面切换  生命周期不会改变
 * 点击home键返回页面  所有页面同时onStop
 * 重新进入应用  所有页面同时onResume
 * 3、当前ViewPager 被另外的ViewPager包含时 生命周期不会改变
 * eg ViewPager A 有fragment a , b , c页面
 * ViewPagerB 有fragment d,e,f,g页面
 * a页面包含ViewPagerB
 * 当ViewPager A 切换页面的时候 ViewPagerB内的页面生命周期方法不会调用
 * <p/>
 * 由于以上原因 统计效果不佳
 * Fragment 重写 setUserVisibleHint(boolean isVisibleToUser) 方法进行统计
 * 第一次启动时会出现多次调用setUserVisibleHint方法的情况(调用加载页面数+1次)，
 * 所以用定义变量来判断Fragment onCreate 之后的调用有效
 * isVisibleToUser 为 true时 看做 onResume进行统计
 * isVisibleToUser 为 false时 看做 onStop进行统计
 * 具体如下
 *
 * @author NiuLei
 * @email niulei@zeustel.com
 * @date 2015/6/23 16:08
 */
public abstract class WrapHaveFragment extends Fragment implements IOverall {
    //处理第一次加载 setUserVisibleHint 调用加载页面数+1次的情况
    private boolean isCreate = false;
    //记录当前页面是否被显示
    private boolean isVisibleToUser = false;
    //处理第一次加载 onResume setUserVisibleHint 都调用情况
    private boolean isFirst = false;
    //    //处理双ViewPager嵌套的情况
    //    private boolean isParentViewPagerUserVisible = true;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        isCreate = true;
        isFirst = true;
    }

    @Override
    public void onResume() {
        super.onResume();
        //第一次加载时候 不调用 主要用于Home键后进入
        if (isCreate && !isFirst && isVisibleToUser) {
            OnResumeCorrect();
        }
        //第一次调用后 解除限制
        isFirst = false;
    }

    @Override
    public void onPause() {
        super.onPause();
        //主要用于Home键
        if (isCreate && isVisibleToUser) {
            onPauseCorrect();
        }
    }


    /**
     * 当前页面 用户是否可见
     *
     * @param isVisibleToUser 是否可见
     */
    @Override
    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);
        this.isVisibleToUser = isVisibleToUser;
        if (isCreate) {
            if (this.isVisibleToUser) {
                OnResumeCorrect();
            } else {
                onPauseCorrect();
            }
        }
    }

    /**
     * 页面被校正的onResume方法
     */
    public void OnResumeCorrect() {
        setTitleAndBackgroundColor();
    }

    /*{
        //统计页面
        MobclickAgent.onPageStart(getClassName()); //统计页面
        Tools.log_i(EvaluatingFragment.class, "resumeStatistics", "getClassName : " +
        getClassName() + " onResume ");
    }*/

    /**
     * 页面被校正的onPause方法
     */
    public void onPauseCorrect() {

    }

    /* {
        //统计页面
        MobclickAgent.onPageEnd(getClassName());//统计页面
        Tools.log_i(EvaluatingFragment.class, "pauseStatistics", "getClassName : " + getClassName
        () + " onPause ");

    }*/

    /**
     * 当双ViewPager时候 当前的ViewPager所在页面是否为用户所见 校正生命周期
     */
    //    public void setParentViewPagerUserVisible(boolean isParentViewPagerUserVisible){
    //        this.isParentViewPagerUserVisible = isParentViewPagerUserVisible;
    //    }

    public void setTitleAndBackgroundColor() {
        String title = getFloatTitle();
        FragmentActivity fragmentActivity = getActivity();
        if (fragmentActivity instanceof ContainerActivity) {
            ((ContainerActivity) fragmentActivity).container_title.setText(title);
            if (getBackgroundColor() == 0)
                ((ContainerActivity) fragmentActivity).container_title.setBackgroundColor(getResources().getColor(R.color.red));
            else {
                ((ContainerActivity) fragmentActivity).container_title.setBackgroundColor(getBackgroundColor());
            }
        }
    }

    @Override
    public String getClassName() {
        return getClass().getName();
    }
}
